{"version":3,"sources":["../../src/main/invocation-handler.ts"],"names":[],"mappings":";;;;;;AAAA,6EAA4E;AAE5E;;EAEE;AACF;IAA+C,6CAAiB;IAAhE;;IA8BA,CAAC;IA5BG;;;;;MAKE;IACF,0CAAM,GAAN,UAAO,SAAoB,EAAE,mBAA2B;QACpD,IAAM,QAAQ,GAAG,iBAAM,MAAM,YAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;QAC9D,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IACtD,CAAC;IAED;;;;;MAKE;IACF,oDAAgB,GAAhB,UAAiB,SAAoB,EAAE,QAAa;QAChD,IAAM,gBAAgB,GAAS,IAAI,CAAC,EAAG,CAAC,gBAAgB,CAAC;QACzD,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,gBAAgB,CAAC,CAAC,CAAC;YACpC,QAAQ,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;QACnE,CAAC;QACD,EAAE,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC5B,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC7C,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAEL,gCAAC;AAAD,CA9BA,AA8BC,CA9B8C,gDAAiB,GA8B/D;AA9BY,8DAAyB;AAgCtC;;EAEE;AACF;IAA0D,wDAAiB;IAA3E;;IAqCA,CAAC;IAnCG;;;;;MAKE;IACF,qDAAM,GAAN,UAAO,SAAoB,EAAE,mBAA2B;QACpD,IAAM,gBAAgB,GAAS,IAAI,CAAC,EAAG,CAAC,gBAAgB,CAAC;QACzD,IAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACxC,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,gBAAgB,CAAC,CAAC,CAAC;YACpC,WAAW,CAAC,QAAQ,CAAC,GAAG;gBACpB,YAAY,EAAE,IAAI;gBAClB,UAAU,EAAE,IAAI;gBAChB,QAAQ,EAAE,IAAI;gBACd,KAAK,EAAE,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;aACnD,CAAC;QACN,CAAC;QACD,6EAA6E;QAC7E,IAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,IAAI,IAAI,EAAE,WAAW,CAAC,CAAC;QACvE,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;QACjC,IAAI,IAAI,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;QAExB,OAAO,CAAC,EAAE,EAAE,CAAC;YACT,IAAI,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC;QAED,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACtB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QAC5C,CAAC;QAED,mBAAmB;QACnB,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC9B,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAEL,2CAAC;AAAD,CArCA,AAqCC,CArCyD,gDAAiB,GAqC1E;AArCY,oFAAoC","file":"invocation-handler.js","sourcesContent":["import { Container, InvocationHandler } from 'aurelia-dependency-injection';\n\n/**\n* Invocation handler to inject properties.\n*/\nexport class PropertyInvocationHandler extends InvocationHandler {\n\n    /**\n    * Invokes the function.\n    * @param container The calling container.\n    * @param dynamicDependencies Additional dependencies to use during invocation.\n    * @return The result of the function invocation.\n    */\n    invoke(container: Container, dynamicDependencies?: any[]): any {\n        const instance = super.invoke(container, dynamicDependencies);\n        return this.injectProperties(container, instance);\n    }\n\n    /**\n    * Injects property dependencies if the conventional `injectProperties` is defined.\n    * @param container The calling container.\n    * @param instance The target of injection.\n    * @return The instance with injected properties.\n    */\n    injectProperties(container: Container, instance: any): any {\n        const injectProperties = (<any>this.fn).injectProperties;\n        for (let property in injectProperties) {\n            instance[property] = container.get(injectProperties[property]);\n        }\n        if (instance.afterConstructor) {\n            instance.afterConstructor.call(instance);\n        }\n        return instance;\n    }\n\n}\n\n/**\n* Invocation handler to inject properties available in constructor.\n*/\nexport class PropertyConstructorInvocationHandler extends InvocationHandler {\n\n    /**\n    * Invokes the function.\n    * @param container The calling container.\n    * @param dynamicDependencies Additional dependencies to use during invocation.\n    * @return The result of the function invocation.\n    */\n    invoke(container: Container, dynamicDependencies?: any[]): any {\n        const injectProperties = (<any>this.fn).injectProperties;\n        const injectProps = Object.create(null);\n        for (let property in injectProperties) {\n            injectProps[property] = {\n                configurable: true,\n                enumerable: true,\n                writable: true,\n                value: container.get(injectProperties[property])\n            };\n        }\n        // inject properties as soon as object is created, before calling constructor\n        const instance = Object.create(this.fn.prototype || null, injectProps);\n        let i = this.dependencies.length;\n        let args = new Array(i);\n\n        while (i--) {\n            args[i] = container.get(this.dependencies[i]);\n        }\n\n        if (dynamicDependencies) {\n            args = args.concat(dynamicDependencies);\n        }\n\n        // call constructor\n        this.fn.apply(instance, args);\n        return instance;\n    }\n\n}\n"]}