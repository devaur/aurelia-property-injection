{"version":3,"sources":["../../src/main/index.ts"],"names":[],"mappings":";;;;AAAA,2DAAuG;AAEvG,kCAA6B;AAC7B,iCAA4B;AAE5B,mBAA0B,sBAAsB,EAAE,MAAM;IACpD,IAAM,OAAO,GAAG,MAAM,IAAI,MAAM,CAAC,iBAAiB,GAAG,yDAAoC,GAAG,8CAAyB,CAAC;IACtH,sBAAsB,CAAC,SAAS,CAAC,yBAAyB,CAAC,UAAA,OAAO;QAC9D,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,gBAAgB,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC;IAClH,CAAC,CAAC,CAAC;AACP,CAAC;AALD,8BAKC","file":"index.js","sourcesContent":["import { PropertyInvocationHandler, PropertyConstructorInvocationHandler } from './invocation-handler';\n\nexport * from './decorators';\nexport * from './resolvers';\n\nexport function configure(frameworkConfiguration, config) {\n    const Handler = config && config.injectConstructor ? PropertyConstructorInvocationHandler : PropertyInvocationHandler;\n    frameworkConfiguration.container.setHandlerCreatedCallback(handler => {\n        return handler.fn.injectProperties ? new Handler(handler.fn, handler.invoker, handler.dependencies) : handler;\n    });\n}\n"]}