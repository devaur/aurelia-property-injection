{"version":3,"sources":["../../src/test/unit/index.spec.ts"],"names":[],"mappings":"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","file":"index.spec.js","sourcesContent":["import \"aurelia-polyfills\";\nimport { Container, Lazy } from 'aurelia-dependency-injection';\nimport { configure, autoinject, inject, all, parent, optional, lazy, factory, newInstance } from '../../main/index';\nimport { PropertyInvocationHandler, PropertyConstructorInvocationHandler } from '../../main/invocation-handler';\n\nfunction getContainer(config?: any) {\n    const container = new Container()\n    configure({container}, config);\n    return container;\n}\n\ndescribe('property-injection', () => {\n\n    it('uses static injectProperties', () => {\n        class Logger {}\n\n        class App {\n            static injectProperties = {\n                logger: Logger\n            };\n        }\n\n        spyOn(PropertyInvocationHandler.prototype, 'invoke').and.callThrough();\n\n        const container = getContainer();\n        const app = container.get(App);\n\n        expect(PropertyInvocationHandler.prototype.invoke).toHaveBeenCalledWith(container, undefined);\n        expect(app).toEqual(jasmine.any(App));\n        expect(app.logger).toEqual(jasmine.any(Logger));\n    });\n\n    it('calls afterConstructor hook', () => {\n        class Logger {\n            check;\n        }\n\n        class App {\n            static injectProperties = {\n                logger: Logger\n            };\n\n            logger: Logger;\n\n            afterConstructor() {\n                this.logger.check = true;\n            }\n        }\n\n        let app = getContainer().get(App);\n\n        expect(app.logger.check).toBe(true);\n    });\n\n    describe('configure', () => {\n        it('returns original handler if no injectProperties', () => {\n          spyOn(PropertyInvocationHandler.prototype, 'invoke');\n\n          class App {}\n\n          const app = getContainer().get(App);\n\n          expect(PropertyInvocationHandler.prototype.invoke).not.toHaveBeenCalled();\n          expect(app).toEqual(jasmine.any(App));\n        });\n\n        it('uses constructor invocation handler if required', () => {\n          spyOn(PropertyInvocationHandler.prototype, 'invoke');\n          spyOn(PropertyConstructorInvocationHandler.prototype, 'invoke').and.callThrough();\n\n          class Logger {}\n\n          class App {\n            static injectProperties = {\n                logger: Logger\n            }\n          }\n\n          const container = getContainer({\n            injectConstructor: true\n          });\n          const app = container.get(App);\n\n          expect(PropertyInvocationHandler.prototype.invoke).not.toHaveBeenCalled();\n          expect(PropertyConstructorInvocationHandler.prototype.invoke).toHaveBeenCalledWith(container, undefined);\n          expect(app).toEqual(jasmine.any(App));\n          expect(app.logger).toEqual(jasmine.any(Logger));\n        });\n\n    });\n\n    describe('with custom decorator', () => {\n\n        describe('@autoinject', () => {\n            it('injects dependency in constructor', () => {\n                class Logger {}\n\n                @autoinject\n                class App {\n                  @autoinject logger2: Logger;\n                  constructor (public logger: Logger) {}\n                }\n\n                let app = getContainer({\n                    injectConstructor: true\n                }).get(App);\n\n                expect(app.logger).toEqual(jasmine.any(Logger));\n                expect(app.logger).toBe(app.logger2);\n            });\n\n            it('injects the required dependency', () => {\n                class Logger {}\n\n                class App {\n                    @autoinject logger: Logger;\n                }\n\n                let app = getContainer().get(App);\n\n                expect(app.logger).toEqual(jasmine.any(Logger));\n            });\n        });\n\n        describe('@inject', () => {\n            it('injects the required dependency', () => {\n                class Logger {}\n\n                class App {\n                    @inject(Logger) logger;\n                }\n\n                let app = getContainer().get(App);\n\n                expect(app.logger).toEqual(jasmine.any(Logger));\n            });\n        });\n\n        describe('@lazy', () => {\n            it('provides a function which, when called, will return the instance', () => {\n                class Logger {}\n\n                class App {\n                    @lazy(Logger) getLogger;\n                }\n\n                let app = getContainer().get(App);\n\n                expect(app.getLogger).toEqual(jasmine.any(Function));\n                expect(app.getLogger()).toEqual(jasmine.any(Logger));\n            });\n        });\n\n        describe('@all', () => {\n            it('resolves all matching dependencies as an array of instances', () => {\n                class Logger {}\n\n                class VerboseLogger extends Logger {}\n\n                class LaconicLogger extends Logger {}\n\n                class App {\n                    @all(Logger) loggers;\n                }\n\n                let container = getContainer();\n                container.registerSingleton(Logger, VerboseLogger);\n                container.registerTransient(Logger, LaconicLogger);\n                let app = container.get(App);\n\n                expect(app.loggers).toEqual([\n                    jasmine.any(VerboseLogger),\n                    jasmine.any(LaconicLogger)\n                ]);\n            });\n        });\n\n        describe('@optional', () => {\n            it('injects the instance if its registered in the container', () => {\n                class Logger {}\n\n                class App {\n                    @optional(Logger) logger;\n                }\n\n                let container = getContainer()\n                container.registerSingleton(Logger, Logger);\n                let app = container.get(App);\n\n                expect(app.logger).toEqual(jasmine.any(Logger));\n            });\n\n            it('injects null if key is not registered in the container', () => {\n                class Logger {}\n\n                class VerboseLogger {}\n\n                class App {\n                    @optional(Logger) logger;\n                }\n\n                let container = getContainer();\n                container.registerSingleton(VerboseLogger, Logger);\n                let app = container.get(App);\n\n                expect(app.logger).toBe(null);\n            });\n\n            it('injects null if key nor function is registered in the container', () => {\n                class Logger {}\n\n                class VerboseLogger {}\n\n                class App {\n                    @optional(Logger) logger;\n                }\n\n                let container = getContainer();\n                let app = container.get(App);\n\n                expect(app.logger).toBe(null);\n            });\n\n        });\n\n        describe('@parent', () => {\n            it('bypasses the current container and injects instance from parent container', () => {\n                class Logger {}\n\n                class App {\n                    @parent(Logger) logger;\n                }\n\n                let parentContainer = getContainer();\n                let parentInstance = new Logger();\n                parentContainer.registerInstance(Logger, parentInstance);\n\n                let childContainer = parentContainer.createChild();\n                let childInstance = new Logger();\n                childContainer.registerInstance(Logger, childInstance);\n                childContainer.registerSingleton(App, App);\n\n                const app = childContainer.get(App);\n\n                expect(childContainer.get(Logger)).toBe(childInstance);\n                expect(app.logger).toBe(parentInstance);\n            });\n\n            it('returns null when no parent container exists', () => {\n                class Logger {}\n\n                class App {\n                    @parent(Logger) logger;\n                }\n\n                let container = getContainer();\n                let instance = new Logger();\n                container.registerInstance(Logger, instance);\n\n                let app = container.get(App);\n\n                expect(app.logger).toBeNull();\n            });\n        });\n\n        describe('@factory', () => {\n            let data = 'test';\n\n            class Service {\n                data: any;\n\n                constructor(data) {\n                    this.data = data;\n                }\n            }\n\n            class App {\n                static injectProperties = {};\n\n                @factory(Service) GetService;\n\n                service: Service;\n\n                afterConstructor() {\n                    this.service = new this.GetService(data);\n                }\n            }\n\n            it('provides a function which, when called, will return the instance', () => {\n                const app = getContainer().get(App);\n                const service = app.GetService;\n                expect(service()).toEqual(jasmine.any(Service));\n            });\n\n            it('passes data in to the constructor as the second argument', () => {\n                const app = getContainer().get(App);\n                expect(app.service.data).toBe(data);\n            });\n        });\n\n        describe('@newInstance', () => {\n            it('provides a new instance of the dependency', () => {\n                class Logger {}\n\n                class App {\n                    @newInstance(Logger) fooLogger;\n                    @newInstance(Logger) barLogger;\n                }\n\n                let app = getContainer().get(App);\n\n                expect(app.fooLogger).toEqual(jasmine.any(Logger));\n                expect(app.barLogger).toEqual(jasmine.any(Logger));\n                expect(app.fooLogger).not.toBe(app.barLogger);\n            });\n            it('provides a new instance of the dependency with dynamics dependencies', () => {\n                class Logger {\n                    dep: Dependency;\n                    constructor(dep) {\n                        this.dep = dep;\n                    }\n                }\n\n                class Dependency {}\n\n                class App {\n                    @newInstance(Logger, Dependency) fooLogger;\n                    @newInstance(Logger, Lazy.of(Dependency)) barLogger;\n                }\n\n                let app = getContainer().get(App);\n\n                expect(app.fooLogger.dep).toEqual(jasmine.any(Dependency));\n                expect(app.barLogger.dep()).toEqual(jasmine.any(Dependency));\n            });\n        });\n\n    });\n});\n"]}